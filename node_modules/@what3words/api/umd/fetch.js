(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./utils", "axios", "./version", "os"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require("./utils");
    var axios_1 = require("axios");
    var version_1 = require("./version");
    var os = require("os");
    var platform = (function (platform) {
        switch (platform) {
            case 'darwin':
                return 'Mac OS X';
            case 'win32':
                return 'Windows';
            case 'linux':
                return 'Linux';
            default:
                return "";
        }
    })(os.platform());
    exports.fetchGet = function (url, data, signal) {
        if (data === void 0) { data = {}; }
        if (signal === void 0) { signal = null; }
        return new Promise(function (resolve, error) {
            if (typeof utils_1.GLOBAL_OPTIONS.key === "string" &&
                utils_1.GLOBAL_OPTIONS.key.length > 0) {
                data["key"] = utils_1.GLOBAL_OPTIONS.key;
            }
            axios_1.default.request({
                url: utils_1.GLOBAL_OPTIONS.baseUrl + "/" + url + "?" + utils_1.searchParams(data),
                headers: { 'X-W3W-Wrapper': "what3words-Node/" + version_1.version + " (Node " + process.version + "; " + platform + " " + os.release() + ")" }
            })
                .then(function (response) {
                if (response && response.status) {
                    if (response.status >= 400) {
                        // @ts-ignore
                        error(response.data.error);
                    }
                }
                resolve(response.data);
            }).catch(function (data) {
                if (data.response) {
                    error(data.response.data);
                }
                else {
                    error(data.message);
                }
            });
        });
    };
});
